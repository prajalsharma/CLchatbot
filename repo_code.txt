<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/favicon.jpeg" type="image/x-icon" />
    <meta property="og:title" content="Web3 Grants - Discover & Apply for Grants" />
<meta property="og:title" content="Web3 Grants Dashboard" />
<meta property="og:description" content="Discover, track, and apply for Web3 grants using our interactive dashboard." />
<meta property="og:image" content="https://web3grants.s3.us-east-1.amazonaws.com/preview" />
<meta property="og:image:type" content="image/jpeg" />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:type" content="website" />
<meta property="og:url" content="https://www.web3grants.co" />

<meta name="twitter:card" content="summary_large_image">
<meta name="twitter:site" content="@YourTwitterHandle"> <!-- Optional but useful -->
<meta name="twitter:title" content="CL Web3 Grants Dashboard">
<meta name="twitter:description" content="Easily find, match, and analyze Web3 grants with the CL Web3 Grants Dashboardâ€”your go-to tool for Web3 funding.">
<meta name="twitter:image" content="https://web3grants.s3.us-east-1.amazonaws.com/preview">


    <title>CL Web3 Grants Database</title><script async src="https://www.googletagmanager.com/gtag/js?id=G-SR2EHKZMJQ"></script>
<script async src="https://www.googletagmanager.com/gtag/js?id=G-SR2EHKZMJQ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-SR2EHKZMJQ');
</script> 
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>/** @type {import('tailwindcss').Config} */
export default {
  darkMode: ["class"],
  content: ["./index.html", "./src/**/*.{ts,tsx,js,jsx}"],
  theme: {
    extend: {
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          1: "hsl(var(--chart-1))",
          2: "hsl(var(--chart-2))",
          3: "hsl(var(--chart-3))",
          4: "hsl(var(--chart-4))",
          5: "hsl(var(--chart-5))",
        },
      },
      screens: {
        "3xl": "1900px",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
};
import path from "path";
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import { config } from 'dotenv';

config();

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  define: {
    'process.env': process.env
  }
});
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs));
}
export const ecosystems = [
  { value: "Aptos", label: "Aptos" },
  { value: "Base", label: "Base" },
  { value: "Cartesi", label: "Cartesi"},
  { value: "Cosmos", label: "Cosmos" },
  { value: "Ethereum", label: "Ethereum" },
  { value: "EU", label: "European Union" },
  { value: "Filecoin", label: "Filecoin" },
  { value: "Fuel", label: "Fuel" },
  { value: "Hedera", label: "Hedera" },
  { value: "IOTA", label: "IOTA" },
  { value: "Kadena", label: "Kadena" },
  { value: "Linea", label: "Linea" },
  { value: "Nibiru", label: "Nibiru" },
  { value: "Other", label: "Other" },
  { value: "Polkadot", label: "Polkadot" },
  { value: "Ripple", label: "Ripple" },
  { value: "Stellar", label: "Stellar" },
  { value: "XION", label: "XION" },
  { value: "Dfinity", label: "Difinity" },
  { value: "TON", label: "TON" },
  { value: "Solana", label: "Solana" },
  { value: "Starknet", label: "Starknet" },
{ value: "Polygon", label: "Polygon" },
  { value: "Cardano", label: "Cardano" },
  
];

export const statuses = [
  { value: "Active", label: "Active" },
  { value: "Upcoming", label: "Upcoming" }
];

export const fundingTopics = [
  { value: "AI", label: "AI" },
  { value: "AIAgents", label: "AIAgents" },
    { value: "Bugs", label: "Bugs" },
  { value: "CrossChain", label: "CrossChain" },
  { value: "DAOs", label: "DAOs" },
  { value: "Data & Oracles", label: "Data & Oracles" },
  { value: "DeFi", label: "DeFi" },
  { value: "DePIN", label: "DePIN" },
  { value: "DevTooling", label: "Developer Tooling" },
  { value: "Digital Euro", label: "Digital Euro" },
  { value: "Education", label: "Education" },
    { value: "Events", label: "Events" },
  { value: "Gaming", label: "Gaming & Metaverse" },
  { value: "Infra", label: "Infrastructure" },
  { value: "NFTs", label: "NFTs & Creator Economy" },
  { value: "Privacy & Security", label: "Privacy & Security" },
  { value: "PublicGoods", label: "Public Goods & Open Source" },
  { value: "RWAs", label: "Real-World Assets (RWAs)" },
  { value: "Social & Community", label: "Social & Community" },
  { value: "Stablecoins & Payments", label: "Stablecoins & Payments" },
   { value: "Sustainability", label: "Sustainability" },
  { value: "ZK", label: "Zero Knowledge (ZK)" }
 
];

export const fundingTypes = [
  { value: "AI-BlockchainResearchGrants", label: "AI-Blockchain Research Grants" },
  { value: "Bounty-Based", label: "Bounty-Based" },
  { value: "HackathonGrants", label: "Hackathon Grants" },
  { value: "IncubationAcceleration", label: "Incubation & Acceleration" },
  { value: "MatchingGrants", label: "Matching Grants" },
  { value: "OpenGrants", label: "Open Grants" },
  { value: "QuadraticFunding", label: "Quadratic Funding" },
  { value: "RetroactiveGrants", label: "Retroactive Grants" }, 
  { value: "StakingLiquidityIncentives", label: "Staking & Liquidity Incentives" },
   { value: "Tender", label: "Tender" }
];
